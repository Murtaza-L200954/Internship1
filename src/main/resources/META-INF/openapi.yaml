openapi: 3.0.3
info:
  title: Retail Shop REST API
  version: 1.0.0
  description: |
    REST API for managing retail shop operations including user signup,
    customer management, products, orders, and authentication.

servers:
  - url: http://localhost:8080/api
    description: Local development server

paths:
  /signup:
    post:
      summary: Register a new user
      description: |
        Creates a new user account with the given role (`customer`, `admin`, etc). 
        If the role is `customer`, also creates a corresponding customer profile.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Missing required fields or invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /login:
    post:
      summary: Login a user
      description: |
        Authenticates the user and returns a JWT token if credentials are valid.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: Login successful, returns JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /customers:
   get:
      summary: Get all customers
      description: |
        Returns a list of all customers. Only accessible to users with roles `admin` or `staff`.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '403':
          description: Access denied (Admins and staff only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers/{id}:
    delete:
      summary: Delete a customer by ID
      description: |
        Deletes a customer based on the provided ID. Only accessible to users with role `admin`.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the customer to delete
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Customer deleted successfully
        '403':
          description: Access denied (Admins only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Customer not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /products:
    get:
      summary: Get all products
      description: Returns a list of all products. Requires admin or staff.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Add a new product
      description: Adds a new product to the catalog. Requires admin or staff.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product added successfully
        '400':
          description: Invalid product input
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update an existing product
      description: Updates product information. Requires admin or staff.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
        '400':
          description: Invalid product input
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      summary: Get a product by ID
      description: Returns product details by ID. Requires admin or staff.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a product by ID
      description: Deletes a product by ID. Requires admin or staff.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Product deleted successfully
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /orders:
    get:
      summary: Get all orders
      description: List all orders (admin and staff only).
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '403':
          description: Access denied
        '500':
          description: Server error

    post:
      summary: Place a new order
      description: Creates a new order and its items after validating stock and prices.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order placed successfully
        '400':
          description: Invalid order input or insufficient stock
        '500':
          description: Internal server error

  /orders/{id}:
    get:
      summary: Get order by ID
      description: Fetches a specific order by ID (admin and staff only).
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: Access denied
        '404':
          description: Order not found
        '500':
          description: Server error

    delete:
      summary: Delete an order
      description: Deletes an order by ID (admin only).
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Order deleted
        '403':
          description: Access denied
        '404':
          description: Order not found
        '500':
          description: Server error

  /orders/{id}/items:
    get:
      summary: Get items of a specific order
      description: Retrieves items belonging to a specific order (admin and staff only).
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Order items retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderItem'
        '403':
          description: Access denied
        '500':
          description: Server error

  /orders/{id}/status:
    put:
      summary: Update order status
      description: Updates the status of an order. Requires admin or staff.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: status
          required: true
          schema:
            type: string
            enum: [Pending, Processing, Shipped, Delivered, Cancelled]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Status updated
        '400':
          description: Invalid status
        '403':
          description: Access denied
        '404':
          description: Order not found
        '500':
          description: Server error
  
  /users:
    post:
      summary: "[DEPRECATED] Create a new user"
      description: |
        Creates a user with a given role. 
        Use `/signup` instead for creating customers.
      deprecated: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
        '400':
          description: Invalid input
        '409':
          description: Username already exists
        '500':
          description: Internal server error

  /users/{id}:
    get:
      summary: Get user by ID
      description: Fetch user details (password excluded in response).
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal server error

    put:
      summary: Update a user
      description: Update user credentials and optionally update linked customer.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
        '400':
          description: Invalid input or role
        '404':
          description: User not found
        '500':
          description: Server error

    delete:
      summary: Delete a user
      description: Deletes the user and related customer if role is `customer`.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted
        '404':
          description: User not found
        '500':
          description: Server error


components:
  schemas:
  
    Product:
      type: object
      required:
        - name
        - price
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer

  
  
    SignUpRequest:
      type: object
      required:
        - username
        - password
        - role
      properties:
        username:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [admin, staff, customer]
        customerInfo:
          $ref: '#/components/schemas/Customer'

    Customer:
      type: object
      required:
        - name
        - email
        - phone
        - address
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        userId:
          type: integer
          description: ID of the associated user

    ErrorResponse:
      type: object
      properties:
        error:
          type: string

    UserLoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          
    Order:
      type: object
      properties:
        id:
          type: integer
        customerId:
          type: integer
        status:
          type: string
        total_amount:
          type: number
          format: float
        created_at:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        id:
          type: integer
        orderId:
          type: integer
        productId:
          type: integer
        quantity:
          type: integer
        unitPrice:
          type: number
          format: float

    OrderRequest:
      type: object
      required:
        - customerId
        - status
        - items
      properties:
        customerId:
          type: integer
        status:
          type: string
          enum: [Pending, Processing, Shipped, Delivered, Cancelled]
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
            
    User:
      type: object
      required:
        - username
        - password
        - role
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [admin, staff, customer]
            
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT



